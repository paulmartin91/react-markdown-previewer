{"version":3,"sources":["MarkdownPreviewer.js","serviceWorker.js","index.js"],"names":["placeholder","MarkdownPreviewer","props","state","input","handleChange","bind","convertText","event","this","setState","target","value","__html","marked","sanitize","className","onChange","id","dangerouslySetInnerHTML","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVAIMA,EAAc,s6BAsCLC,E,YAnCb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,MAAOJ,GAET,EAAKK,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBANH,E,0EASLE,GACXC,KAAKC,SAAS,CACZN,MAAOI,EAAMG,OAAOC,U,oCAQtB,MAAO,CACLC,OAJWC,IAAOL,KAAKN,MAAMC,MAAO,CACpCW,UAAU,O,+BASZ,OACD,yBAAKC,UAAU,OACd,8BAAUJ,MAASH,KAAKN,MAAMC,MAAOa,SAAUR,KAAKJ,aAAcW,UAAU,UAAUE,GAAG,WACzF,yBAAKF,UAAU,aAAaE,GAAI,UAAUC,wBAA2BV,KAAKF,qB,GA9B9Ca,IAAMC,WCMlBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAuBC,SAASC,eAAe,SD2HzD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4f209dad.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport marked from 'marked';\n\nconst placeholder = \"#Markdown examples\\n##By Paul Martin\\nHere is a quick look at the basics of markdown. The page is split in to two sections...\\n\\n← On the left is the markdown editor, where you can see how it is written\\n\\n→ On the right is the markdown previewer, where you can see how it comes out\\n\\nHere are some cool things you can do with markdown:\\n\\n[This is a link to Google](www.google.com)\\n\\n`var thisIsSomeCode = true`\\n\\n```\\nint thisIsACodeBlock(){\\nstd::cout<<\\\"These can be multiline!\\\";\\nreturn 0;\\n}\\n```\\n\\n 1. You can also write... \\n 2. ...lists too! \\n\\n\\n\\n >Don't forget Blockquotes\\n\\nAnd memes (or any images for that matter):\\n![alt text](http://www.quickmeme.com/img/44/449a52928a45a7c7a3575c966e00ee4f07e034023baa4cdb85b4f321d94e39b6.jpg \\'Logo Title Text 1\\')\\n\\n**There's loads more, so check out the link below for [bonus syntax...](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#images)**\";\n\nclass MarkdownPreviewer extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      input: placeholder,\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.convertText = this.convertText.bind(this)\n  }\n  \n  handleChange(event){\n    this.setState({\n      input: event.target.value\n    })\n  }\n  \n  convertText(){\n  var convText = marked(this.state.input, {\n      sanitize: true\n    });\n    return {\n      __html: convText\n    };\n  }\n  \n  render(){\n    \n    return(\n   <div className=\"all\">\n    <textarea value = {this.state.input} onChange={this.handleChange} className=\"editBox\" id=\"editor\" />\n    <div className=\"previewBox\" id =\"preview\" dangerouslySetInnerHTML = {this.convertText()}></div>\n   </div>\n    )\n  }\n}\n\nexport default MarkdownPreviewer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MarkdownPreviewer from './MarkdownPreviewer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MarkdownPreviewer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}